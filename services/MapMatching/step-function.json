{
  "StartAt": "preparation",
  "States": {
    "preparation": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload": {
          "notebook_path": "notebooks/preparation.ipynb",
          "scenario_path_S3.$": "$.scenario_path_S3",
          "launcher_arg.$": "$.launcher_arg",
          "metadata.$": "$.metadata"
        },
        "FunctionName": "arn:aws:lambda:ca-central-1:142023388927:function:quetzal-mapmatching-api"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "Lambda.AWSLambdaException"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 4,
          "BackoffRate": 2
        }
      ],
      "Next": "Map"
    },
    "Map": {
      "Type": "Map",
      "ItemsPath": "$.launcher_arg.params.exec_id",
      "Parameters": {
        "exec_id.$": "$$.Map.Item.Value",
        "scenario_path_S3.$": "$.scenario_path_S3",
        "metadata.$": "$.metadata",
        "launcher_arg": {
          "training_folder.$": "$.launcher_arg.training_folder",
          "params": {
            "exclusions.$": "$.launcher_arg.params.exclusions",
            "SIGMA.$": "$.launcher_arg.params.SIGMA",
            "BETA.$": "$.launcher_arg.params.BETA",
            "POWER.$": "$.launcher_arg.params.POWER",
            "DIFF.$": "$.launcher_arg.params.DIFF",
            "ptMetrics.$": "$.launcher_arg.params.ptMetrics",
            "exec_id.$": "$$.Map.Item.Value"
          }
        }
      },
      "Iterator": {
        "StartAt": "mapmatching",
        "States": {
          "mapmatching": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$.Payload",
            "Parameters": {
              "Payload": {
                "notebook_path": "notebooks/mapmatching.ipynb",
                "scenario_path_S3.$": "$.scenario_path_S3",
                "metadata.$": "$.metadata",
                "launcher_arg.$": "$.launcher_arg"
              },
              "FunctionName": "arn:aws:lambda:ca-central-1:142023388927:function:quetzal-mapmatching-api"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 2,
                "BackoffRate": 2
              },
              {
                "ErrorEquals": [
                  "Lambda.AWSLambdaException"
                ],
                "IntervalSeconds": 30,
                "MaxAttempts": 4,
                "BackoffRate": 2
              }
            ],
            "End": true
          }
        }
      },
      "Next": "merge"
    },
    "merge": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload": {
          "notebook_path": "notebooks/merge.ipynb",
          "scenario_path_S3.$": "$[0].scenario_path_S3",
          "launcher_arg.$": "$[0].launcher_arg",
          "metadata.$": "$[0].metadata"
        },
        "FunctionName": "arn:aws:lambda:ca-central-1:142023388927:function:quetzal-mapmatching-api"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "Lambda.AWSLambdaException"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 4,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}